// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Overgave.Models;

namespace Overgave.Migrations
{
    [DbContext(typeof(OvergaveContext))]
    [Migration("20200821152818_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-preview.7.20365.15");

            modelBuilder.Entity("Overgave.Models.ATA", b =>
                {
                    b.Property<int>("Ata")
                        .HasColumnType("int")
                        .HasColumnName("ATA");

                    b.Property<string>("AtaText")
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .IsFixedLength(true);

                    b.HasKey("Ata")
                        .HasName("PK_ATA_1");

                    b.ToTable("ATA");
                });

            modelBuilder.Entity("Overgave.Models.Actype", b =>
                {
                    b.Property<long>("Actypes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ACTypes")
                        .UseIdentityColumn();

                    b.Property<string>("SubType")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("Actypes");

                    b.ToTable("ACTypes");
                });

            modelBuilder.Entity("Overgave.Models.Aircraft", b =>
                {
                    b.Property<string>("Registration")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<long>("Actype")
                        .HasColumnType("bigint")
                        .HasColumnName("ACType");

                    b.Property<string>("Effectifity")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Etops")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("Registration")
                        .HasName("PK_Aircraft_1");

                    b.HasIndex("Actype");

                    b.ToTable("Aircraft");
                });

            modelBuilder.Entity("Overgave.Models.Item", b =>
                {
                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Acreg")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("ACReg")
                        .IsFixedLength(true);

                    b.Property<bool>("ActionReq")
                        .HasColumnType("bit");

                    b.Property<bool>("AddToPrint")
                        .HasColumnType("bit");

                    b.Property<int?>("Ata")
                        .HasColumnType("int")
                        .HasColumnName("ATA");

                    b.Property<string>("Catagorie")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Etopsaffected")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("ETOPSAffected")
                        .HasDefaultValueSql("((180))")
                        .IsFixedLength(true);

                    b.Property<string>("Initiator")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("ItemStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<long?>("OrgId")
                        .HasColumnType("bigint")
                        .HasColumnName("orgId");

                    b.Property<string>("Responce")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubAta")
                        .HasColumnType("nchar(25)")
                        .IsFixedLength(true);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VakGroep")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("ItemId");

                    b.HasIndex("Acreg");

                    b.HasIndex("Ata");

                    b.HasIndex("Initiator");

                    b.HasIndex("SubAta");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Overgave.Models.Part", b =>
                {
                    b.Property<long>("PartId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.Property<bool>("InOut")
                        .HasColumnType("bit");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("RaPn")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnVn")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength(true);

                    b.HasKey("PartId");

                    b.HasIndex("ItemId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Overgave.Models.Reference", b =>
                {
                    b.Property<long>("RefId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("RefType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Reference1")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Reference")
                        .IsFixedLength(true);

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("RefId");

                    b.HasIndex("ItemId");

                    b.ToTable("References");
                });

            modelBuilder.Entity("Overgave.Models.SubATA", b =>
                {
                    b.Property<string>("SubAta")
                        .HasMaxLength(25)
                        .HasColumnType("nchar(25)")
                        .IsFixedLength(true);

                    b.Property<string>("A330")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("Ata")
                        .HasColumnType("int")
                        .HasColumnName("ATA");

                    b.Property<string>("B737")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("B747")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("B777")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("B787")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("SubAta");

                    b.HasIndex("Ata");

                    b.ToTable("SubAta");
                });

            modelBuilder.Entity("Overgave.Models.TS", b =>
                {
                    b.Property<string>("Klmid")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("KLMId")
                        .IsFixedLength(true);

                    b.Property<bool>("B1")
                        .HasColumnType("bit");

                    b.Property<bool>("B2")
                        .HasColumnType("bit");

                    b.Property<bool>("Def737")
                        .HasColumnType("bit");

                    b.Property<bool>("Def747")
                        .HasColumnType("bit");

                    b.Property<bool>("Def777")
                        .HasColumnType("bit");

                    b.Property<bool>("Def787")
                        .HasColumnType("bit");

                    b.Property<bool>("DefA330")
                        .HasColumnType("bit");

                    b.Property<string>("Initial")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("isReadOnly")
                        .HasColumnType("bit");

                    b.HasKey("Klmid");

                    b.ToTable("TS");
                });

            modelBuilder.Entity("Overgave.Models.Aircraft", b =>
                {
                    b.HasOne("Overgave.Models.Actype", "ActypeNavigation")
                        .WithMany("Aircraft")
                        .HasForeignKey("Actype")
                        .HasConstraintName("FK_Aircraft_ACTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("Overgave.Models.Item", b =>
                {
                    b.HasOne("Overgave.Models.Aircraft", "AcregNavigation")
                        .WithMany("Items")
                        .HasForeignKey("Acreg")
                        .HasConstraintName("FK_Items_Aircraft")
                        .IsRequired();

                    b.HasOne("Overgave.Models.ATA", "AtaNavigation")
                        .WithMany("Items")
                        .HasForeignKey("Ata")
                        .HasConstraintName("FK_Items_ATA");

                    b.HasOne("Overgave.Models.TS", "InitiatorNavigation")
                        .WithMany("Items")
                        .HasForeignKey("Initiator")
                        .HasConstraintName("FK_Items_TS")
                        .IsRequired();

                    b.HasOne("Overgave.Models.SubATA", "SubAtaNavigation")
                        .WithMany("Items")
                        .HasForeignKey("SubAta")
                        .HasConstraintName("FK_Items_SubAta");
                });

            modelBuilder.Entity("Overgave.Models.Part", b =>
                {
                    b.HasOne("Overgave.Models.Item", "Item")
                        .WithMany("Parts")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_Parts_Items")
                        .IsRequired();
                });

            modelBuilder.Entity("Overgave.Models.Reference", b =>
                {
                    b.HasOne("Overgave.Models.Item", "Item")
                        .WithMany("References")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_References_Items")
                        .IsRequired();
                });

            modelBuilder.Entity("Overgave.Models.SubATA", b =>
                {
                    b.HasOne("Overgave.Models.ATA", "AtaNavigation")
                        .WithMany("SubAta")
                        .HasForeignKey("Ata")
                        .HasConstraintName("FK_SubAta_ATA")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
